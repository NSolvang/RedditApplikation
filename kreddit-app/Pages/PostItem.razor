<!-- 
Notice how this route has a route parameter 'id'. This is how we can pass data to the route.
See how the links are made in 'PostList.razor'.
-->
@page "/post/{id}"

@using kreddit_app.Data;
@using shared.Model;
@inject ApiService apiService

<PageTitle>Kreddit</PageTitle>

<style>
    div.contents {
        background-color: #f2f0eb;
        width: 600px;
        border: 2px solid #452d3d;
        padding: 10px;
        margin-top: 20px;
    }
</style>

@if (Post == null)
{
    <p><em>Indlæser opslag...</em></p>
}
else
{
    <div class="post-container">
        <div class="post-card">
            <h2 class="post-title">@Post.Title</h2>
            <p class="post-meta">
                <strong>@Post.User.Username</strong> · 
                <span>@(Post.Upvotes - Post.Downvotes) stemmer</span>
            </p>
            <p class="post-content">@Post.Content</p>
        </div>

        <div class="comments-section">
            <h3>Kommentarer</h3>

            @if (Post.Comments == null || Post.Comments.Count == 0)
            {
                <p class="no-comments">Ingen kommentarer endnu.</p>
            }
            else
            {
                <table class="comment-table">
                    <thead>
                        <tr>
                            <th>Bruger</th>
                            <th>Kommentar</th>
                            <th>Stemmer</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var comment in Post.Comments)
                        {
                            <tr>
                                <td class="username">@comment.User.Username</td>
                                <td>@comment.Content</td>
                                <td class="votes">@(comment.Upvotes - comment.Downvotes)</td>
                                <td class="vote-buttons">
                                    <button class="btn-vote up" @onclick="() => UpvoteComment(PostId, comment.Id)">⬆</button>
                                    <button class="btn-vote down" @onclick="() => DownvoteComment(PostId, comment.Id)">⬇</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            <div class="comment-form">
                <CreateComment PostId="@PostId" OnCommentCreated="RefreshPost"></CreateComment>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    public int PostId { get { return int.Parse(Id); } }
    public Post Post { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Post = await apiService.GetPost(PostId);
    }

    private async Task UpvoteComment(int postid, int commentid)
    {
        await apiService.UpvoteComment(postid, commentid);
        Post = await apiService.GetPost(postid);
        StateHasChanged();
    }

    private async Task DownvoteComment(int postid, int commentid)
    {
        await apiService.DownvoteComment(postid, commentid);
        Post = await apiService.GetPost(postid);
        StateHasChanged();
    }

    private async Task RefreshPost()
    {
        Post = await apiService.GetPost(PostId);
        StateHasChanged();
    }
}