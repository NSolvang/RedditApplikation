@inherits LayoutComponentBase

@using kreddit_app.Data
@using shared.Model
@inject ApiService apiService
@inject NavigationManager Navigation

@if (posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="post-feed">
        @foreach (var post in posts)
        {
            <div class="post-card">
                <h3 @onclick="() => NavigateToPost(post.Id)" class="post-title">@post.Title</h3>
                <p class="post-content">@post.Content</p>
                <div class="post-footer">
                    <span class="post-votes">Votes: @(post.Upvotes - post.Downvotes)</span>
                    <button class="btn-upvote" @onclick="@(() => Upvote(post.Id))">Upvote</button>
                    <button class="btn-downvote" @onclick="@(() => Downvote(post.Id))">Downvote</button>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Post> posts = new List<Post>();

    protected override async Task OnInitializedAsync()
    {
        var loadedPosts = await apiService.GetPosts();
        if (loadedPosts != null)
            posts = loadedPosts.ToList();

        if (posts.Count > 0)
            Console.WriteLine(posts[0].ToString());
    }

    public async Task AddPostAsync(Post newPost)
    {
        posts.Add(newPost);
        await InvokeAsync(StateHasChanged);
    }


    private async Task Upvote(int id)
    {
        await apiService.UpvotePost(id);
        posts = (await apiService.GetPosts()).ToList();
        StateHasChanged();
    }

    private async Task Downvote(int id)
    {
        await apiService.DownvotePost(id);
        posts = (await apiService.GetPosts()).ToList();
        StateHasChanged();
    }

    private void NavigateToPost(int id)
    {
        Navigation.NavigateTo($"/post/{id}");
    }
}